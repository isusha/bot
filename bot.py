import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from forecast import get_forecast  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–æ–∑–¥—É—Ö–∞ üåç\n"
        "–ù–∞–ø–∏—à–∏ /forecast <–≥–æ—Ä–æ–¥>, –Ω–∞–ø—Ä–∏–º–µ—Ä: /forecast –ê–ª–º–∞—Ç—ã"
    )


@dp.message_handler(commands=["forecast"])
async def forecast_cmd(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /forecast <–≥–æ—Ä–æ–¥>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /forecast –ê–ª–º–∞—Ç—ã")
        return

    city = parts[1]
    await message.reply(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}...")

    text, image_path = get_forecast(city)

    await message.reply(text)

    if image_path and os.path.exists(image_path):
        with open(image_path, "rb") as photo:
            await message.reply_photo(photo, caption="–ü—Ä–æ–≥–Ω–æ–∑ AQI –Ω–∞ 24 —á–∞—Å–∞")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
