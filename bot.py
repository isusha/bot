import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from forecast import aqi_message

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN
API_TOKEN = os.getenv("BOT_TOKEN")

if not API_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ üåç\n"
        "–ù–∞–ø–∏—à–∏ /aqi <–≥–æ—Ä–æ–¥> –∏ —è –ø–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "–ü—Ä–∏–º–µ—Ä: /aqi Almaty"
    )

@dp.message_handler(commands=["aqi"])
async def aqi_handler(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("‚ùó –ù–∞–ø–∏—à–∏ —Ç–∞–∫: /aqi <–≥–æ—Ä–æ–¥>\n–ü—Ä–∏–º–µ—Ä: /aqi Almaty")
        return

    city = parts[1]
    result = aqi_message(city)
    await message.reply(result)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
