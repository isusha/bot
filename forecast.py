import os
import requests
import h5py
import numpy as np

# ---------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------------
NASA_TOKEN = os.getenv("NASA_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

if not NASA_TOKEN:
    raise ValueError("NASA_API_KEY not set!")
if not OPENWEATHER_API_KEY:
    raise ValueError("OPENWEATHER_API_KEY not set!")

# ---------------------- –§—É–Ω–∫—Ü–∏–∏ ----------------------
def get_coordinates(city: str):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ OpenWeather Geo API"""
    url = f"https://api.openweathermap.org/geo/1.0/direct?q={city}&limit=1&appid={OPENWEATHER_API_KEY}"
    try:
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        if data:
            return data[0]["lat"], data[0]["lon"]
    except Exception as e:
        print(f"Error getting coordinates: {e}")
    return None, None

def download_nasa_air_quality(lat: float, lon: float):
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ NASA –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω.
    –ü—Ä–∏–º–µ—Ä: GEOS-CF/processed AQ data –≤ —Ñ–æ—Ä–º–∞—Ç–µ NetCDF/HDF5.
    """
    url = f"https://example-nasa-data-url/{lat},{lon}/air_quality.nc"  # <-- –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL NASA
    headers = {"Authorization": f"Bearer {NASA_TOKEN}"}
    try:
        response = requests.get(url, headers=headers, timeout=20)
        response.raise_for_status()
        with open("nasa_air_quality.nc", "wb") as f:
            f.write(response.content)
        return "nasa_air_quality.nc"
    except Exception as e:
        print(f"Error downloading NASA data: {e}")
        return None

def parse_nasa_air_quality(file_path):
    """–ü–∞—Ä—Å–µ—Ä HDF5/NetCDF, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç AQI –∏ PM2.5/PM10"""
    try:
        with h5py.File(file_path, "r") as f:
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–∞—è, –ø—Ä–∏–º–µ—Ä –¥–ª—è GEOS-CF
            aqi = f["AQI"][0]
            pm25 = f["PM2_5"][0]
            pm10 = f["PM10"][0]
            return int(aqi), float(pm25), float(pm10)
    except Exception as e:
        print(f"Error parsing NASA data: {e}")
        return None, None, None

def estimate_health_risk(aqi, hours_outside):
    """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ AQI –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —É–ª–∏—Ü–µ"""
    if aqi <= 50:
        return "Safe exposure üëç"
    elif aqi <= 100:
        if hours_outside <= 2:
            return "Minor risk ‚Äî short time outside is generally safe."
        elif hours_outside <= 5:
            return "Moderate risk ‚Äî consider limiting outdoor time."
        else:
            return "High risk ‚Äî reduce outdoor exposure!"
    elif aqi <= 150:
        if hours_outside <= 2:
            return "Moderate risk ‚Äî sensitive people should be careful."
        elif hours_outside <= 5:
            return "High risk ‚Äî prolonged exposure not recommended!"
        else:
            return "Very high risk ‚Äî avoid staying outside!"
    elif aqi <= 200:
        if hours_outside <= 2:
            return "High risk ‚Äî limit outdoor activities."
        elif hours_outside <= 5:
            return "Very high risk ‚Äî avoid outdoor exposure."
        else:
            return "Danger ‚Äî severe risk for everyone!"
    else:
        return "Extreme danger ‚Äî avoid any outdoor exposure!"
